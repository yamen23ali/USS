require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  let(:admin_account) {create(:account , id: 1 , name: 'Admin')}
  let(:customer_account) {create(:account , id: 2 , name: 'Customer')}
  let(:admin) { create(:user , account: admin_account)}
  let(:customer) { create(:user , account: customer_account)}

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {first_name: "Test" , last_name: "Test"} }

  let(:invalid_attributes) { {first_name: "Test" , last_name: "Test" , email: "yamen@gmail.com"} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "When Administartor" do

    before (:each) { sign_in_as_a_valid_user(admin) }

    context "GET index" do
      it "gets all users" do
        get :index
        expect(assigns(:users)).to eq([admin])
      end
    end

    context "GET show" do
      it "gets the requested user" do
        get :show, {:id => customer.id}
        expect(assigns(:user)).to eq(customer)
      end
    end

    context "GET edit" do
      it "assigns the requested user as @user" do
        get :edit, {:id => customer.id}
        expect(assigns(:user)).to eq(customer)
      end
    end

  end

  context "When Any User" do

    before (:each) { sign_in_as_a_valid_user(customer) }
    
    context "GET index" do
      it "gets nothing" do
        get :index
        expect(assigns(:users)).to eq([])
      end
    end

    context "GET show" do
      it "gets his user" do
        get :show, {:id => admin.id}
        expect(assigns(:user)).to eq(customer)
      end

      it "cann't get another user" do
        get :show, {:id => customer.id}
        expect(assigns(:user)).to eq(customer)
      end
    end

    context "GET edit" do
      it "assigns his user as @user " do
        get :edit, {:id => customer.id}
        expect(assigns(:user)).to eq(customer)
      end

      it "cann't assigns another user as @user " do
        get :edit, {:id => admin.id}
        expect(assigns(:user)).to eq(customer)
      end
    end

    describe "PUT update" do
    
      describe "with valid params" do
        let(:new_valid_attributes) { {first_name: "new name"} }

        it "updates the requested user" do
          put :update, {:id => customer.id, :user => new_valid_attributes}
          customer.reload
          expect(customer.first_name).to eq("new name")
        end

        it "assigns the requested user as @user" do
          put :update, {:id => customer.id, :user => new_valid_attributes}
          expect(assigns(:user)).to eq(customer)
        end

        it "redirects to the user" do
          put :update, {:id => customer.id, :user => new_valid_attributes}
          expect(response).to redirect_to(customer)
        end

      end

      describe "with invalid params" do
        let(:new_invalid_attributes) { {contact_email: "whatever"} }

        it "assigns the user as @user" do
          put :update, {:id => customer.to_param, :user => new_invalid_attributes}
          expect(assigns(:user)).to eq(customer)
        end

        it "re-renders the 'edit' template" do
          put :update, {:id => customer.to_param, :user => new_invalid_attributes}
          expect(response).to render_template("edit")
        end
      end

    end


  end
   
end
