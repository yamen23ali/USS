require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DescriptorsController, :type => :controller do

  let(:admin_account) {create(:account , id: 1 , name: 'Admin')}
  let(:admin) { create(:user , account: admin_account)}
  let(:descriptor) { create(:descriptor)}
  # This should return the minimal set of attributes required to create a valid
  # Descriptor. As you add validations to Descriptor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {name: "test descriptor"} }

  let(:invalid_attributes) { {name: ""} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DescriptorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before (:each) { sign_in_as_a_valid_user(admin) }

  describe "GET index" do
    it "gets all descriptors" do
      get :index
      expect(assigns(:descriptors)).to eq([descriptor])
    end
  end

  describe "GET show" do
    it "gets descriptor" do
      get :show, {:id => descriptor.to_param}
      expect(assigns(:descriptor)).to eq(descriptor)
    end
  end

  describe "GET new" do
    it "assigns a new descriptor as @descriptor" do
      get :new, {}
      expect(assigns(:descriptor)).to be_a_new(Descriptor)
    end
  end

  describe "GET edit" do
    it "edits the requested descriptor" do
      get :edit, {:id => descriptor.to_param}
      expect(assigns(:descriptor)).to eq(descriptor)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Descriptor" do
        expect {
          post :create, {:descriptor => valid_attributes}
        }.to change(Descriptor, :count).by(1)
      end

      it "assigns a newly created descriptor as @descriptor" do
        post :create, {:descriptor => valid_attributes}
        expect(assigns(:descriptor)).to be_a(Descriptor)
        expect(assigns(:descriptor)).to be_persisted
      end

      it "redirects to the created descriptor" do
        post :create, {:descriptor => valid_attributes}
        expect(response).to redirect_to(Descriptor.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved descriptor as @descriptor" do
        post :create, {:descriptor => invalid_attributes}
        expect(assigns(:descriptor)).to be_a_new(Descriptor)
      end

      it "re-renders the 'new' template" do
        post :create, {:descriptor => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) { {name: "test descriptor 2"} }

      it "updates the requested descriptor" do
        descriptor = create(:descriptor)
        put :update, {:id => descriptor.to_param, :descriptor => new_attributes}
        descriptor.reload
        expect(descriptor.name).to eq("test descriptor 2")
      end

      it "assigns the requested descriptor as @descriptor" do
        descriptor = create(:descriptor)
        put :update, {:id => descriptor.to_param, :descriptor => valid_attributes}
        expect(assigns(:descriptor)).to eq(descriptor)
      end

      it "redirects to the descriptor" do
        descriptor = create(:descriptor)
        put :update, {:id => descriptor.to_param, :descriptor => valid_attributes}
        expect(response).to redirect_to(descriptor)
      end
    end

    describe "with invalid params" do
      it "assigns the descriptor as @descriptor" do
        descriptor = create(:descriptor)
        put :update, {:id => descriptor.to_param, :descriptor => invalid_attributes}
        expect(assigns(:descriptor)).to eq(descriptor)
      end

      it "re-renders the 'edit' template" do
        descriptor = create(:descriptor)
        put :update, {:id => descriptor.to_param, :descriptor => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested descriptor" do
      descriptor = create(:descriptor)
      expect {
        delete :destroy, {:id => descriptor.to_param}
      }.to change(Descriptor, :count).by(-1)
    end

    it "redirects to the descriptors list" do
      descriptor = create(:descriptor)
      delete :destroy, {:id => descriptor.to_param}
      expect(response).to redirect_to(descriptors_url)
    end
  end

end
