require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OffersController, :type => :controller do


  let(:customer_account) {create(:account , id: 2 , name: 'Customer')}
  let(:customer) { create(:user , account: customer_account)}
  let(:customer2) { create(:user)}
  let(:offers) {create_list(:offer,5,from: customer, to: customer2)}
  let(:status) {create(:status, id:1)}

  # This should return the minimal set of attributes required to create a valid
  # Offer. As you add validations to Offer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { form_id: customer , to_id: customer2 , status: status}
  }

  let(:invalid_attributes) {
    {from: nil , to: nil}
  }

  before (:each) { sign_in_as_a_valid_user(customer) }

  describe "GET index" do
    it "assigns all offers as @offers" do
      get :index, {}
      expect(assigns(:offers)).to match_array(offers)
    end
  end

  describe "GET show" do
    it "assigns the requested offer as @offer" do
      get :show, {:id => offers.first.to_param}
      expect(assigns(:offer)).to eq(offers.first)
    end
  end

  describe "GET new" do
    it "assigns a new offer as @offer" do
      get :new, {}
      expect(assigns(:offer)).to be_a_new(Offer)
    end
  end

  describe "GET edit" do
    it "assigns the requested offer as @offer" do
      get :edit, {:id => offers.first.to_param}
      expect(assigns(:offer)).to eq(offers.first)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Offer" do
        expect {
          post :create, {:offer => valid_attributes}
        }.to change(Offer, :count).by(1)
      end

      it "assigns a newly created offer as @offer" do
        post :create, {:offer => valid_attributes}
        expect(assigns(:offer)).to be_a(Offer)
        expect(assigns(:offer)).to be_persisted
      end

      it "redirects to the created offer" do
        post :create, {:offer => valid_attributes}
        expect(response).to render_template(:choose_assets)
      end
    end
  end

  describe "Choose Asset" do

    let(:category) {create(:category)}
    let(:assets) {create_list(:asset,5,category: category)}
    let(:choosed_assets_att) {{ choosed_assets: [assets.first,assets.last] , id: offers.first.id}}

    it "Chooses asset to associate with the offer" do
      expect {
        post :choose_assets, { id: offers.first.id ,:offer => choosed_assets_att}
      }.to change(OfferAsset, :count).by(2)
    end
    
  end

  describe "DELETE destroy" do
    before (:each) { @offer = create(:offer, from: customer) }

    it "destroys the requested offer" do
      expect {
        delete :destroy, {:id => @offer.to_param}
      }.to change(Offer, :count).by(-1)
    end

    it "redirects to the offers list" do
      delete :destroy, {:id => @offer.to_param}
      expect(response).to redirect_to(offers_url)
    end
  end

end
