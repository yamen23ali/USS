require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AssetsController, :type => :controller do

  let(:customer_account) {create(:account , id: 2 , name: 'Customer')}
  let(:customer) { create(:user , account: customer_account)}
  let(:assets) {create_list(:asset,5,user: customer)}
  let(:category) {create(:category)}
  let(:sub_category) {create(:sub_category)}

  # This should return the minimal set of attributes required to create a valid
  # Asset. As you add validations to Asset, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { 
    {
      category_id: category.id , sub_category_id: sub_category.id
    }
  }

  let(:invalid_attributes) {
    {category_id: nil}
  }


  before (:each) { sign_in_as_a_valid_user(customer) }


  describe "GET index" do
    it "assigns all assets as @assets" do      
      get :index, {}
      expect(assigns(:assets)).to eq(assets)
    end
  end

  describe "GET show" do
    it "assigns the requested asset as @asset" do
      get :show, {:id => assets.first.to_param}
      expect(assigns(:asset)).to eq(assets.first)
    end
  end

  describe "GET new" do
    it "assigns a new asset as @asset" do
      get :new, {}
      expect(assigns(:asset)).to be_a_new(Asset)
    end
  end

  describe "GET edit" do
    it "assigns the requested asset as @asset" do
      get :edit, {:id => assets.first.to_param}
      expect(assigns(:asset)).to eq(assets.first)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Asset" do
        expect {
          post :create, {:asset => valid_attributes}
        }.to change(Asset, :count).by(1)
      end

      it "assigns a newly created asset as @asset" do
        post :create, {:asset => valid_attributes}
        expect(assigns(:asset)).to be_a(Asset)
        expect(assigns(:asset)).to be_persisted
      end

      it "redirects to the created asset" do
        post :create, {:asset => valid_attributes}
        expect(response).to redirect_to(Asset.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved asset as @asset" do
        post :create, {:asset => invalid_attributes}
        expect(assigns(:asset)).to be_a_new(Asset)
      end

      it "re-renders the 'new' template" do
        post :create, {:asset => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    let(:new_category) {create(:category)}
    before (:each) { @asset = create(:asset , category_id: category.id , user: customer) }

    describe "with valid params" do
      let(:new_attributes) { {category_id: new_category.id } }

      it "updates the requested asset" do
        put :update, {:id => @asset.to_param, :asset => new_attributes}
        @asset.reload
        expect(@asset.category).to eq(new_category)
      end

      it "assigns the requested asset as @asset" do
        put :update, {:id => @asset.to_param, :asset => new_attributes}
        expect(assigns(:asset)).to eq(@asset)
      end

      it "redirects to the asset" do
        put :update, {:id => @asset.to_param, :asset => new_attributes}
        expect(response).to redirect_to(@asset)
      end
    end

    describe "with invalid params" do
      it "assigns the asset as @asset" do
        put :update, {:id => @asset.to_param, :asset => invalid_attributes}
        expect(assigns(:asset)).to eq(@asset)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => @asset.to_param, :asset => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before (:each) { @asset = create(:asset ,user: customer) }

    it "destroys the requested asset" do
      expect {
        delete :destroy, {:id => @asset.to_param}
      }.to change(Asset, :count).by(-1)
    end

    it "redirects to the assets list" do
      delete :destroy, {:id => @asset.to_param}
      expect(response).to redirect_to(assets_url)
    end
  end

end
