require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AssetDataController, :type => :controller do

  let(:customer_account) {create(:account , id: 2 , name: 'Customer')}
  let(:customer) { create(:user , account: customer_account)}
  let(:asset) {create(:asset, user: customer)}
  let(:asset_data) {create_list(:asset_data, 5 , asset: asset)}
  let(:descriptor) {create(:descriptor)}


  # This should return the minimal set of attributes required to create a valid
  # AssetData. As you add validations to AssetData, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { asset: asset , descriptor_id: descriptor.id }
  }

  let(:invalid_attributes) {
  }


  before (:each) { sign_in_as_a_valid_user(customer) }

  describe "GET index" do
    it "assigns all asset_data as @asset_data" do
      get :index, {}
      expect(assigns(:asset_data)).to eq(asset_data)
    end
  end

  describe "GET show" do
    it "assigns the requested asset_data as @asset_data" do
      get :show, {:id => asset_data.first.to_param}
      expect(assigns(:asset_data)).to eq(asset_data.first)
    end
  end

  describe "GET new" do
    it "assigns a new asset_data as @asset_data" do
      get :new, {}
      expect(assigns(:asset_data)).to be_a_new(AssetData)
    end
  end

  describe "GET edit" do
    it "assigns the requested asset_data as @asset_data" do
      get :edit, {:id => asset_data.first.to_param}
      expect(assigns(:asset_data)).to eq(asset_data.first)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new AssetData" do
        expect {
          post :create, {:asset_data => valid_attributes}
        }.to change(AssetData, :count).by(1)
      end

      it "assigns a newly created asset_data as @asset_data" do
        post :create, {:asset_data => valid_attributes}
        expect(assigns(:asset_data)).to be_a(AssetData)
        expect(assigns(:asset_data)).to be_persisted
      end

      it "redirects to the created asset_data" do
        post :create, {:asset_data => valid_attributes}
        expect(response).to redirect_to(AssetData.last)
      end
    end

    describe "with invalid params" do
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_descriptor) {create(:descriptor)}
      let(:new_attributes) {
        {descriptor_id: new_descriptor.id}
      }

      it "updates the requested asset_data" do
        put :update, {:id => asset_data.first.to_param, :asset_data => new_attributes}
        asset_data.first.reload
        expect(asset_data.first.descriptor).to eq(new_descriptor)
      end

      it "assigns the requested asset_data as @asset_data" do
        put :update, {:id => asset_data.first.to_param, :asset_data => valid_attributes}
        expect(assigns(:asset_data)).to eq(asset_data.first)
      end

      it "redirects to the asset_data" do
        put :update, {:id => asset_data.first.to_param, :asset_data => valid_attributes}
        expect(response).to redirect_to(asset_data.first)
      end
    end

    describe "with invalid params" do
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested asset_data" do
      expect {
        delete :destroy, {:id => asset_data.first.to_param}
      }.to change(AssetData, :count).by(4)
    end

    it "redirects to the asset_data list" do
      delete :destroy, {:id => asset_data.first.to_param}
      expect(response).to redirect_to(asset_data_index_url)
    end
  end

end
